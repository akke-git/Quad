// pages/api/golf/rounds/[id].js

import { golfQuery } from '../../../../lib/db';

export default async function handler(req, res) {
  const { id } = req.query;
  
  // Process PUT request (update round)
  if (req.method === 'PUT') {
    try {
      const { user_id, course_id, play_date, weather, notes, scores } = req.body;
      
      // Validate required fields
      if (!user_id || !course_id || !play_date || !scores || !Array.isArray(scores) || !id) {
        return res.status(400).json({
          status: 'error',
          message: 'Required fields are missing'
        });
      }
      
      // Check if there are valid scores
      if (scores.length === 0) {
        return res.status(400).json({
          status: 'error',
          message: 'At least one hole score is required'
        });
      }
      
      // Calculate total score (only for entered holes)
      const total_score = scores.reduce((sum, hole) => sum + (hole.score || 0), 0);
      
      // Start transaction
      await golfQuery('START TRANSACTION');
      
      // Convert date format (ISO format to MySQL format)
      let formattedDate = play_date;
      if (play_date && play_date.includes('T')) {
        // If date is in ISO format, convert to 'YYYY-MM-DD' format
        formattedDate = play_date.split('T')[0];
      }
      
      // Update round information
      await golfQuery(
        `UPDATE rounds 
         SET course_id = ?, play_date = ?, weather = ?, total_score = ?, notes = ?
         WHERE id = ? AND user_id = ?`,
        [course_id, formattedDate, weather, total_score, notes, id, user_id]
      );
      
      // Delete existing hole scores (replace with new data)
      await golfQuery('DELETE FROM hole_scores WHERE round_id = ?', [id]);
      
      // Insert each hole score
      for (const holeScore of scores) {
        await golfQuery(
          `INSERT INTO hole_scores (
            round_id, 
            hole_number, 
            score, 
            putts, 
            fairway_hit, 
            green_in_regulation, 
            sand_save, 
            penalty_strokes
          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            id,
            holeScore.hole_number,
            holeScore.score,
            holeScore.putts || null,
            holeScore.fairway_hit || null,
            holeScore.green_in_regulation || null,
            holeScore.sand_save || null,
            holeScore.penalty_strokes || 0
          ]
        );
      }
      
      // 트랜잭션 커밋
      await golfQuery('COMMIT');
      
      // 업데이트된 라운드 정보 가져오기
      // 기본 라운드 정보 조회
      const roundQuery = `
        SELECT r.*, c.name as course_name, c.region as course_location 
        FROM rounds r
        JOIN golf_courses c ON r.course_id = c.id
        WHERE r.id = ?
      `;
      
      const roundResult = await golfQuery(roundQuery, [id]);
      
      // 홀 스코어 조회
      // 중요: 코스 홀 정보에서 홀 번호가 1-9번까지만 있는 경우가 있으므로,
      // 실제 홀 번호를 9로 나눌 나머지를 사용하여 조회
      const scoresQuery = `
        SELECT hs.*, 
               ch.par as par, 
               ch.course_name as course_name
        FROM hole_scores hs
        LEFT JOIN course_holes ch ON 
          ch.course_id = ? AND 
          (ch.hole_number = IF(hs.hole_number > 9, hs.hole_number - 9, hs.hole_number))
        WHERE hs.round_id = ?
        ORDER BY hs.hole_number
      `;
      
      const scoreResults = await golfQuery(scoresQuery, [course_id, id]);
      
      // 응답 데이터 구성
      const roundData = {
        ...roundResult[0],
        scores: scoreResults
      };
      
      return res.status(200).json({
        status: 'success',
        message: 'Round successfully updated',
        data: roundData
      });
    } catch (error) {
      // 오류 발생 시 롤백
      await golfQuery('ROLLBACK');
      
      console.error('Error updating round:', error);
      return res.status(500).json({
        status: 'error',
        message: 'Failed to update round'
      });
    }
  }
  
  // Process GET request (retrieve single round)
  if (req.method === 'GET') {
    try {
      // Retrieve basic round information
      const roundQuery = `
        SELECT r.*, c.name as course_name, c.region as course_location
        FROM rounds r
        JOIN golf_courses c ON r.course_id = c.id
        WHERE r.id = ?
      `;
      
      const rounds = await golfQuery(roundQuery, [id]);
      
      if (rounds.length === 0) {
        return res.status(404).json({
          status: 'error',
          message: 'Round not found'
        });
      }
      
      // Retrieve hole scores with par values and course_name from course_holes
      // 중요: 코스 홀 정보에서 홀 번호가 1-9번까지만 있는 경우가 있으므로,
      // 실제 홀 번호를 9로 나눌 나머지를 사용하여 조회
      const scoresQuery = `
        SELECT hs.*, 
               ch.par as par, 
               ch.course_name as course_name
        FROM hole_scores hs
        LEFT JOIN course_holes ch ON 
          ch.course_id = ? AND 
          (ch.hole_number = IF(hs.hole_number > 9, hs.hole_number - 9, hs.hole_number))
        WHERE hs.round_id = ?
        ORDER BY hs.hole_number
      `;
      
      const scores = await golfQuery(scoresQuery, [rounds[0].course_id, id]);
      
      // Construct response data
      const roundData = {
        ...rounds[0],
        scores
      };
      
      return res.status(200).json({
        status: 'success',
        data: roundData
      });
    } catch (error) {
      console.error('Error fetching round:', error);
      return res.status(500).json({
        status: 'error',
        message: 'Failed to retrieve round'
      });
    }
  }
  
  // Process DELETE request (delete round)
  if (req.method === 'DELETE') {
    try {
      // Start transaction
      await golfQuery('START TRANSACTION');
      
      // Delete hole scores
      await golfQuery('DELETE FROM hole_scores WHERE round_id = ?', [id]);
      
      // Delete round
      await golfQuery('DELETE FROM rounds WHERE id = ?', [id]);
      
      // 트랜잭션 커밋
      await golfQuery('COMMIT');
      
      return res.status(200).json({
        status: 'success',
        message: 'Round successfully deleted'
      });
    } catch (error) {
      // 오류 발생 시 롤백
      await golfQuery('ROLLBACK');
      
      console.error('Error deleting round:', error);
      return res.status(500).json({
        status: 'error',
        message: 'Failed to delete round'
      });
    }
  }
  
  // 지원하지 않는 HTTP 메서드
  return res.status(405).json({
    status: 'error',
    message: `Method ${req.method} Not Allowed`
  });
}
